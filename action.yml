name: kaggle Action
author: Rowe Wilson Frederisk Holme, forked and modified by Phillip Culliton
description: Use kaggle to implement simple CI, which supports GPU.

inputs:
  username:
    description: kaggle username
    required: true
  key:
    description: kaggle key
    required: true

  # id:
  #   description: The URL slug of your kernel
  # id_no:
  #   description: The kernel's numeric ID
  title:
    description: The title of the kernel
    required: true
  code_file:
    description: The path to your kernel source code
    required: true
  language:
    description: The language your kernel is written in
    default: python
  kernel_type:
    description: The type of kernel
    default: script
  # is_private:
  #   description: Whether or not the kernel should be private
  enable_gpu:
    description: Whether or not the kernel should run on a GPU
    default: enable
  enable_internet:
    description: Whether or not the kernel should be able to access the internet
    default: enable
  dataset_sources:
    description: A list of dataset sources
  competition_sources:
    description: A list of competition sources
  kernel_sources:
    description: A list of kernel sources
  model_sources:
    description: A list of model sources, format "username/model-slug/framework/variation-slug/version-number"

outputs:
  automatic_releases_tag:
    description: The release tag this action just processed
    value: ""
  upload_url:
    description: The URL for uploading additional assets to the release
    value: ""

runs:
  using: composite
  steps:
    - name: Install kaggle CLI tools
      shell: pwsh
      run: python -m pip install --upgrade kaggle --user

    - name: Setup kaggle.json
      shell: pwsh
      run: |
        [String]$kaggleInfo = ConvertTo-Json -InputObject @{
          'username' = '${{ inputs.username }}';
          'key' = '${{ inputs.key }}'
        };
        [String]$kaggleFile = [System.IO.Path]::Combine('~', '.kaggle', 'kaggle.json');
        New-Item -Path $kaggleFile -Type File -Value $kaggleInfo -Force | Out-Null;
        if ($IsLinux -or $IsMacOS) {
          chmod 600 $kaggleFile;
        }

    - name: Setup test
      shell: pwsh
      run: |
        # location
        Set-Location -Path '${{ github.action_path }}' | Out-Null;
        [String]$actionPath = '${{ github.action_path }}';

        # kaggle init
        kaggle kernels init -p $actionPath;

        # process metadata json
        [String]$jsonPath = [System.IO.Path]::Combine($actionPath, 'kernel-metadata.json');
        [Hashtable]$metadata = Get-Content -Path $jsonPath -Raw | ConvertFrom-Json -AsHashtable;
        # $metadata[''] = '$#{{ inputs. }}';
        $metadata['id'] = $metadata['id'].Split('/')[0] + '/' + '${{ inputs.title }}';
        $metadata['title'] = '${{ inputs.title }}';
        $metadata['code_file'] = '${{ github.workspace }}' + '/' + '${{ inputs.code_file }}';
        $metadata['language'] = '${{ inputs.language }}';
        $metadata['kernel_type'] = '${{ inputs.kernel_type }}';
        $metadata['enable_gpu'] = '${{ inputs.enable_gpu }}' -eq 'enable';
        $metadata['enable_internet'] = '${{ inputs.enable_internet }}' -eq 'enable';
        $metadata["model_sources"] = ``['${{ inputs.model_sources }}'``];
        $metadata["dataset_sources"] = ['${{ inputs.dataset_sources }}'];
        $metadata["competition_sources"] = ['${{ inputs.competition_sources }}'];
        $metadata["kernel_sources"] = ['${{ inputs.kernel_sources }}'];

        ConvertTo-Json -InputObject $metadata | Set-Content -Path $jsonPath | Out-Null;

        #kaggle push
        kaggle kernels push;

    - name: Check status
      shell: pwsh
      run: |
        # location
        Set-Location -Path '${{ github.action_path }}' | Out-Null;
        [String]$kernelName = '${{ inputs.title }}';

        # check status
        try {
          while ($true) {
            [String]$status = (kaggle kernels status $kernelName 2>&1) -join ' ';
            # error
            if ($status -like '*error*') {
              throw [System.Management.Automation.ApplicationFailedException]::new('FAIL: Test(s) failed.');
            }
            # cancel
            elseif ($status -like '*cancel*') {
              throw [OperationCanceledException]::new('FAIL: Test(s) failed. The kaggle kernel has been canceled.');
            }
            #complete
            elseif ($status -like '*complete*') {
              Write-Host -Object 'SUCCESS: Kaggle Integration Tests!' -ForegroundColor Green | Out-Null;
              break;
            }
            # running
            else {
              Start-Sleep -Seconds 3 | Out-Null;
            }
          }
        }
        catch [System.Management.Automation.ApplicationFailedException], [OperationCanceledException]  {
          # write log
          kaggle kernels output $kernelName;
          [String]$fullMessage = (Get-Content -Path ($kernelName + '.log') -Raw | ConvertFrom-Json -AsHashtable | ForEach-Object -Process { $_['data'] }) -join '';
          Write-Host -Object @"
        ::group::Full log
        $fullMessage
        ::endgroup::
        "@ | Out-Null;
          throw;
        }

branding:
  icon: activity
  color: green
